// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// ForeignDatum represents a row from 'foreign_data'.
type ForeignDatum struct {
	ID           NullInt64  `json:"id" db:"id"`                     // id
	Flavortext   NullString `json:"flavorText" db:"flavorText"`     // flavorText
	Language     NullString `json:"language" db:"language"`         // language
	Multiverseid NullInt64  `json:"multiverseid" db:"multiverseid"` // multiverseid
	Name         NullString `json:"name" db:"name"`                 // name
	Text         NullString `json:"text" db:"text"`                 // text
	Type         NullString `json:"type" db:"type"`                 // type
	UUID         NullString `json:"uuid" db:"uuid"`                 // uuid

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ForeignDatum exists in the database.
func (fd *ForeignDatum) Exists() bool {
	return fd._exists
}

// Deleted provides information if the ForeignDatum has been deleted from the database.
func (fd *ForeignDatum) Deleted() bool {
	return fd._deleted
}

// Insert inserts the ForeignDatum to the database.
func (fd *ForeignDatum) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO foreign_data (` +
		`flavorText, language, multiverseid, name, text, type, uuid` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, fd.Flavortext, fd.Language, fd.Multiverseid, fd.Name, fd.Text, fd.Type, fd.UUID)
	err = db.QueryRow(sqlstr, fd.Flavortext, fd.Language, fd.Multiverseid, fd.Name, fd.Text, fd.Type, fd.UUID).Scan(&fd.ID)
	if err != nil {
		return err
	}

	// set existence
	fd._exists = true

	return nil
}

// Update updates the ForeignDatum in the database.
func (fd *ForeignDatum) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE foreign_data SET (` +
		`flavorText, language, multiverseid, name, text, type, uuid` +
		`) = ( ` +
		`?, ?, ?, ?, ?, ?, ?` +
		`) WHERE id = $8`

	// run query
	XOLog(sqlstr, fd.Flavortext, fd.Language, fd.Multiverseid, fd.Name, fd.Text, fd.Type, fd.UUID, fd.ID)
	_, err = db.Exec(sqlstr, fd.Flavortext, fd.Language, fd.Multiverseid, fd.Name, fd.Text, fd.Type, fd.UUID, fd.ID)
	return err
}

// Save saves the ForeignDatum to the database.
func (fd *ForeignDatum) Save(db XODB) error {
	if fd.Exists() {
		return fd.Update(db)
	}

	return fd.Insert(db)
}

// Upsert performs an upsert for ForeignDatum.
//
// NOTE: PostgreSQL 9.5+ only
func (fd *ForeignDatum) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if fd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO foreign_data (` +
		`id, flavorText, language, multiverseid, name, text, type, uuid` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, flavorText, language, multiverseid, name, text, type, uuid` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.flavorText, EXCLUDED.language, EXCLUDED.multiverseid, EXCLUDED.name, EXCLUDED.text, EXCLUDED.type, EXCLUDED.uuid` +
		`)`

	// run query
	XOLog(sqlstr, fd.ID, fd.Flavortext, fd.Language, fd.Multiverseid, fd.Name, fd.Text, fd.Type, fd.UUID)
	_, err = db.Exec(sqlstr, fd.ID, fd.Flavortext, fd.Language, fd.Multiverseid, fd.Name, fd.Text, fd.Type, fd.UUID)
	if err != nil {
		return err
	}

	// set existence
	fd._exists = true

	return nil
}

// Delete deletes the ForeignDatum from the database.
func (fd *ForeignDatum) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fd._exists {
		return nil
	}

	// if deleted, bail
	if fd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM foreign_data WHERE id = $1`

	// run query
	XOLog(sqlstr, fd.ID)
	_, err = db.Exec(sqlstr, fd.ID)
	if err != nil {
		return err
	}

	// set deleted
	fd._deleted = true

	return nil
}

// Card returns the Card associated with the ForeignDatum's UUID (uuid).
//
// Generated from foreign key 'foreign_data_uuid_fkey'.
func (fd *ForeignDatum) Card(db XODB) (*Card, error) {
	return CardByUUID(db, fd.UUID.String)
}

// ForeignDatumByID retrieves a row from 'foreign_data' as a ForeignDatum.
//
// Generated from index 'foreign_data_id_pkey'.
func ForeignDatumByID(db XODB, id NullInt64) (*ForeignDatum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, flavorText, language, multiverseid, name, text, type, uuid ` +
		`FROM foreign_data ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	fd := ForeignDatum{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&fd.ID, &fd.Flavortext, &fd.Language, &fd.Multiverseid, &fd.Name, &fd.Text, &fd.Type, &fd.UUID)
	if err != nil {
		return nil, err
	}

	return &fd, nil
}
