// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Card represents a row from 'cards'.
type Card struct {
	ID                      sql.NullInt64   `json:"id" db:"id"`                                           // id
	Artist                  sql.NullString  `json:"artist" db:"artist"`                                   // artist
	Asciiname               sql.NullString  `json:"asciiName" db:"asciiName"`                             // asciiName
	Availability            sql.NullString  `json:"availability" db:"availability"`                       // availability
	Bordercolor             sql.NullString  `json:"borderColor" db:"borderColor"`                         // borderColor
	Cardkingdomfoilid       sql.NullString  `json:"cardKingdomFoilId" db:"cardKingdomFoilId"`             // cardKingdomFoilId
	Cardkingdomid           sql.NullString  `json:"cardKingdomId" db:"cardKingdomId"`                     // cardKingdomId
	Coloridentity           sql.NullString  `json:"colorIdentity" db:"colorIdentity"`                     // colorIdentity
	Colorindicator          sql.NullString  `json:"colorIndicator" db:"colorIndicator"`                   // colorIndicator
	Colors                  sql.NullString  `json:"colors" db:"colors"`                                   // colors
	Convertedmanacost       sql.NullFloat64 `json:"convertedManaCost" db:"convertedManaCost"`             // convertedManaCost
	Dueldeck                sql.NullString  `json:"duelDeck" db:"duelDeck"`                               // duelDeck
	Edhrecrank              sql.NullInt64   `json:"edhrecRank" db:"edhrecRank"`                           // edhrecRank
	Faceconvertedmanacost   sql.NullFloat64 `json:"faceConvertedManaCost" db:"faceConvertedManaCost"`     // faceConvertedManaCost
	Facename                sql.NullString  `json:"faceName" db:"faceName"`                               // faceName
	Flavorname              sql.NullString  `json:"flavorName" db:"flavorName"`                           // flavorName
	Flavortext              sql.NullString  `json:"flavorText" db:"flavorText"`                           // flavorText
	Frameeffects            sql.NullString  `json:"frameEffects" db:"frameEffects"`                       // frameEffects
	Frameversion            sql.NullString  `json:"frameVersion" db:"frameVersion"`                       // frameVersion
	Hand                    sql.NullString  `json:"hand" db:"hand"`                                       // hand
	Hasalternativedecklimit int             `json:"hasAlternativeDeckLimit" db:"hasAlternativeDeckLimit"` // hasAlternativeDeckLimit
	Hascontentwarning       int             `json:"hasContentWarning" db:"hasContentWarning"`             // hasContentWarning
	Hasfoil                 int             `json:"hasFoil" db:"hasFoil"`                                 // hasFoil
	Hasnonfoil              int             `json:"hasNonFoil" db:"hasNonFoil"`                           // hasNonFoil
	Isalternative           int             `json:"isAlternative" db:"isAlternative"`                     // isAlternative
	Isfullart               int             `json:"isFullArt" db:"isFullArt"`                             // isFullArt
	Isonlineonly            int             `json:"isOnlineOnly" db:"isOnlineOnly"`                       // isOnlineOnly
	Isoversized             int             `json:"isOversized" db:"isOversized"`                         // isOversized
	Ispromo                 int             `json:"isPromo" db:"isPromo"`                                 // isPromo
	Isreprint               int             `json:"isReprint" db:"isReprint"`                             // isReprint
	Isreserved              int             `json:"isReserved" db:"isReserved"`                           // isReserved
	Isstarter               int             `json:"isStarter" db:"isStarter"`                             // isStarter
	Isstoryspotlight        int             `json:"isStorySpotlight" db:"isStorySpotlight"`               // isStorySpotlight
	Istextless              int             `json:"isTextless" db:"isTextless"`                           // isTextless
	Istimeshifted           int             `json:"isTimeshifted" db:"isTimeshifted"`                     // isTimeshifted
	Keywords                sql.NullString  `json:"keywords" db:"keywords"`                               // keywords
	Layout                  sql.NullString  `json:"layout" db:"layout"`                                   // layout
	Leadershipskills        sql.NullString  `json:"leadershipSkills" db:"leadershipSkills"`               // leadershipSkills
	Life                    sql.NullString  `json:"life" db:"life"`                                       // life
	Loyalty                 sql.NullString  `json:"loyalty" db:"loyalty"`                                 // loyalty
	Manacost                sql.NullString  `json:"manaCost" db:"manaCost"`                               // manaCost
	Mcmid                   sql.NullString  `json:"mcmId" db:"mcmId"`                                     // mcmId
	Mtgarenaid              sql.NullString  `json:"mtgArenaId" db:"mtgArenaId"`                           // mtgArenaId
	Mtgjsonv4id             sql.NullString  `json:"mtgjsonV4Id" db:"mtgjsonV4Id"`                         // mtgjsonV4Id
	Mtgofoilid              sql.NullString  `json:"mtgoFoilId" db:"mtgoFoilId"`                           // mtgoFoilId
	Mtgoid                  sql.NullString  `json:"mtgoId" db:"mtgoId"`                                   // mtgoId
	Multiverseid            sql.NullString  `json:"multiverseId" db:"multiverseId"`                       // multiverseId
	Name                    sql.NullString  `json:"name" db:"name"`                                       // name
	Number                  sql.NullString  `json:"number" db:"number"`                                   // number
	Originalreleasedate     sql.NullString  `json:"originalReleaseDate" db:"originalReleaseDate"`         // originalReleaseDate
	Originaltext            sql.NullString  `json:"originalText" db:"originalText"`                       // originalText
	Originaltype            sql.NullString  `json:"originalType" db:"originalType"`                       // originalType
	Otherfaceids            sql.NullString  `json:"otherFaceIds" db:"otherFaceIds"`                       // otherFaceIds
	Power                   sql.NullString  `json:"power" db:"power"`                                     // power
	Printings               sql.NullString  `json:"printings" db:"printings"`                             // printings
	Promotypes              sql.NullString  `json:"promoTypes" db:"promoTypes"`                           // promoTypes
	Purchaseurls            sql.NullString  `json:"purchaseUrls" db:"purchaseUrls"`                       // purchaseUrls
	Rarity                  sql.NullString  `json:"rarity" db:"rarity"`                                   // rarity
	Scryfallid              sql.NullString  `json:"scryfallId" db:"scryfallId"`                           // scryfallId
	Scryfallillustrationid  sql.NullString  `json:"scryfallIllustrationId" db:"scryfallIllustrationId"`   // scryfallIllustrationId
	Scryfalloracleid        sql.NullString  `json:"scryfallOracleId" db:"scryfallOracleId"`               // scryfallOracleId
	Setcode                 sql.NullString  `json:"setCode" db:"setCode"`                                 // setCode
	Side                    sql.NullString  `json:"side" db:"side"`                                       // side
	Subtypes                sql.NullString  `json:"subtypes" db:"subtypes"`                               // subtypes
	Supertypes              sql.NullString  `json:"supertypes" db:"supertypes"`                           // supertypes
	Tcgplayerproductid      sql.NullString  `json:"tcgplayerProductId" db:"tcgplayerProductId"`           // tcgplayerProductId
	Text                    sql.NullString  `json:"text" db:"text"`                                       // text
	Toughness               sql.NullString  `json:"toughness" db:"toughness"`                             // toughness
	Type                    sql.NullString  `json:"type" db:"type"`                                       // type
	Types                   sql.NullString  `json:"types" db:"types"`                                     // types
	UUID                    string          `json:"uuid" db:"uuid"`                                       // uuid
	Variations              sql.NullString  `json:"variations" db:"variations"`                           // variations
	Watermark               sql.NullString  `json:"watermark" db:"watermark"`                             // watermark

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Card exists in the database.
func (c *Card) Exists() bool {
	return c._exists
}

// Deleted provides information if the Card has been deleted from the database.
func (c *Card) Deleted() bool {
	return c._deleted
}

// Insert inserts the Card to the database.
func (c *Card) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO cards (` +
		`artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, c.Artist, c.Asciiname, c.Availability, c.Bordercolor, c.Cardkingdomfoilid, c.Cardkingdomid, c.Coloridentity, c.Colorindicator, c.Colors, c.Convertedmanacost, c.Dueldeck, c.Edhrecrank, c.Faceconvertedmanacost, c.Facename, c.Flavorname, c.Flavortext, c.Frameeffects, c.Frameversion, c.Hand, c.Hasalternativedecklimit, c.Hascontentwarning, c.Hasfoil, c.Hasnonfoil, c.Isalternative, c.Isfullart, c.Isonlineonly, c.Isoversized, c.Ispromo, c.Isreprint, c.Isreserved, c.Isstarter, c.Isstoryspotlight, c.Istextless, c.Istimeshifted, c.Keywords, c.Layout, c.Leadershipskills, c.Life, c.Loyalty, c.Manacost, c.Mcmid, c.Mtgarenaid, c.Mtgjsonv4id, c.Mtgofoilid, c.Mtgoid, c.Multiverseid, c.Name, c.Number, c.Originalreleasedate, c.Originaltext, c.Originaltype, c.Otherfaceids, c.Power, c.Printings, c.Promotypes, c.Purchaseurls, c.Rarity, c.Scryfallid, c.Scryfallillustrationid, c.Scryfalloracleid, c.Setcode, c.Side, c.Subtypes, c.Supertypes, c.Tcgplayerproductid, c.Text, c.Toughness, c.Type, c.Types, c.UUID, c.Variations, c.Watermark)
	err = db.QueryRow(sqlstr, c.Artist, c.Asciiname, c.Availability, c.Bordercolor, c.Cardkingdomfoilid, c.Cardkingdomid, c.Coloridentity, c.Colorindicator, c.Colors, c.Convertedmanacost, c.Dueldeck, c.Edhrecrank, c.Faceconvertedmanacost, c.Facename, c.Flavorname, c.Flavortext, c.Frameeffects, c.Frameversion, c.Hand, c.Hasalternativedecklimit, c.Hascontentwarning, c.Hasfoil, c.Hasnonfoil, c.Isalternative, c.Isfullart, c.Isonlineonly, c.Isoversized, c.Ispromo, c.Isreprint, c.Isreserved, c.Isstarter, c.Isstoryspotlight, c.Istextless, c.Istimeshifted, c.Keywords, c.Layout, c.Leadershipskills, c.Life, c.Loyalty, c.Manacost, c.Mcmid, c.Mtgarenaid, c.Mtgjsonv4id, c.Mtgofoilid, c.Mtgoid, c.Multiverseid, c.Name, c.Number, c.Originalreleasedate, c.Originaltext, c.Originaltype, c.Otherfaceids, c.Power, c.Printings, c.Promotypes, c.Purchaseurls, c.Rarity, c.Scryfallid, c.Scryfallillustrationid, c.Scryfalloracleid, c.Setcode, c.Side, c.Subtypes, c.Supertypes, c.Tcgplayerproductid, c.Text, c.Toughness, c.Type, c.Types, c.UUID, c.Variations, c.Watermark).Scan(&c.ID)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Card in the database.
func (c *Card) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE cards SET (` +
		`artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark` +
		`) = ( ` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`) WHERE id = $73`

	// run query
	XOLog(sqlstr, c.Artist, c.Asciiname, c.Availability, c.Bordercolor, c.Cardkingdomfoilid, c.Cardkingdomid, c.Coloridentity, c.Colorindicator, c.Colors, c.Convertedmanacost, c.Dueldeck, c.Edhrecrank, c.Faceconvertedmanacost, c.Facename, c.Flavorname, c.Flavortext, c.Frameeffects, c.Frameversion, c.Hand, c.Hasalternativedecklimit, c.Hascontentwarning, c.Hasfoil, c.Hasnonfoil, c.Isalternative, c.Isfullart, c.Isonlineonly, c.Isoversized, c.Ispromo, c.Isreprint, c.Isreserved, c.Isstarter, c.Isstoryspotlight, c.Istextless, c.Istimeshifted, c.Keywords, c.Layout, c.Leadershipskills, c.Life, c.Loyalty, c.Manacost, c.Mcmid, c.Mtgarenaid, c.Mtgjsonv4id, c.Mtgofoilid, c.Mtgoid, c.Multiverseid, c.Name, c.Number, c.Originalreleasedate, c.Originaltext, c.Originaltype, c.Otherfaceids, c.Power, c.Printings, c.Promotypes, c.Purchaseurls, c.Rarity, c.Scryfallid, c.Scryfallillustrationid, c.Scryfalloracleid, c.Setcode, c.Side, c.Subtypes, c.Supertypes, c.Tcgplayerproductid, c.Text, c.Toughness, c.Type, c.Types, c.UUID, c.Variations, c.Watermark, c.ID)
	_, err = db.Exec(sqlstr, c.Artist, c.Asciiname, c.Availability, c.Bordercolor, c.Cardkingdomfoilid, c.Cardkingdomid, c.Coloridentity, c.Colorindicator, c.Colors, c.Convertedmanacost, c.Dueldeck, c.Edhrecrank, c.Faceconvertedmanacost, c.Facename, c.Flavorname, c.Flavortext, c.Frameeffects, c.Frameversion, c.Hand, c.Hasalternativedecklimit, c.Hascontentwarning, c.Hasfoil, c.Hasnonfoil, c.Isalternative, c.Isfullart, c.Isonlineonly, c.Isoversized, c.Ispromo, c.Isreprint, c.Isreserved, c.Isstarter, c.Isstoryspotlight, c.Istextless, c.Istimeshifted, c.Keywords, c.Layout, c.Leadershipskills, c.Life, c.Loyalty, c.Manacost, c.Mcmid, c.Mtgarenaid, c.Mtgjsonv4id, c.Mtgofoilid, c.Mtgoid, c.Multiverseid, c.Name, c.Number, c.Originalreleasedate, c.Originaltext, c.Originaltype, c.Otherfaceids, c.Power, c.Printings, c.Promotypes, c.Purchaseurls, c.Rarity, c.Scryfallid, c.Scryfallillustrationid, c.Scryfalloracleid, c.Setcode, c.Side, c.Subtypes, c.Supertypes, c.Tcgplayerproductid, c.Text, c.Toughness, c.Type, c.Types, c.UUID, c.Variations, c.Watermark, c.ID)
	return err
}

// Save saves the Card to the database.
func (c *Card) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Card.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Card) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO cards (` +
		`id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.artist, EXCLUDED.asciiName, EXCLUDED.availability, EXCLUDED.borderColor, EXCLUDED.cardKingdomFoilId, EXCLUDED.cardKingdomId, EXCLUDED.colorIdentity, EXCLUDED.colorIndicator, EXCLUDED.colors, EXCLUDED.convertedManaCost, EXCLUDED.duelDeck, EXCLUDED.edhrecRank, EXCLUDED.faceConvertedManaCost, EXCLUDED.faceName, EXCLUDED.flavorName, EXCLUDED.flavorText, EXCLUDED.frameEffects, EXCLUDED.frameVersion, EXCLUDED.hand, EXCLUDED.hasAlternativeDeckLimit, EXCLUDED.hasContentWarning, EXCLUDED.hasFoil, EXCLUDED.hasNonFoil, EXCLUDED.isAlternative, EXCLUDED.isFullArt, EXCLUDED.isOnlineOnly, EXCLUDED.isOversized, EXCLUDED.isPromo, EXCLUDED.isReprint, EXCLUDED.isReserved, EXCLUDED.isStarter, EXCLUDED.isStorySpotlight, EXCLUDED.isTextless, EXCLUDED.isTimeshifted, EXCLUDED.keywords, EXCLUDED.layout, EXCLUDED.leadershipSkills, EXCLUDED.life, EXCLUDED.loyalty, EXCLUDED.manaCost, EXCLUDED.mcmId, EXCLUDED.mtgArenaId, EXCLUDED.mtgjsonV4Id, EXCLUDED.mtgoFoilId, EXCLUDED.mtgoId, EXCLUDED.multiverseId, EXCLUDED.name, EXCLUDED.number, EXCLUDED.originalReleaseDate, EXCLUDED.originalText, EXCLUDED.originalType, EXCLUDED.otherFaceIds, EXCLUDED.power, EXCLUDED.printings, EXCLUDED.promoTypes, EXCLUDED.purchaseUrls, EXCLUDED.rarity, EXCLUDED.scryfallId, EXCLUDED.scryfallIllustrationId, EXCLUDED.scryfallOracleId, EXCLUDED.setCode, EXCLUDED.side, EXCLUDED.subtypes, EXCLUDED.supertypes, EXCLUDED.tcgplayerProductId, EXCLUDED.text, EXCLUDED.toughness, EXCLUDED.type, EXCLUDED.types, EXCLUDED.uuid, EXCLUDED.variations, EXCLUDED.watermark` +
		`)`

	// run query
	XOLog(sqlstr, c.ID, c.Artist, c.Asciiname, c.Availability, c.Bordercolor, c.Cardkingdomfoilid, c.Cardkingdomid, c.Coloridentity, c.Colorindicator, c.Colors, c.Convertedmanacost, c.Dueldeck, c.Edhrecrank, c.Faceconvertedmanacost, c.Facename, c.Flavorname, c.Flavortext, c.Frameeffects, c.Frameversion, c.Hand, c.Hasalternativedecklimit, c.Hascontentwarning, c.Hasfoil, c.Hasnonfoil, c.Isalternative, c.Isfullart, c.Isonlineonly, c.Isoversized, c.Ispromo, c.Isreprint, c.Isreserved, c.Isstarter, c.Isstoryspotlight, c.Istextless, c.Istimeshifted, c.Keywords, c.Layout, c.Leadershipskills, c.Life, c.Loyalty, c.Manacost, c.Mcmid, c.Mtgarenaid, c.Mtgjsonv4id, c.Mtgofoilid, c.Mtgoid, c.Multiverseid, c.Name, c.Number, c.Originalreleasedate, c.Originaltext, c.Originaltype, c.Otherfaceids, c.Power, c.Printings, c.Promotypes, c.Purchaseurls, c.Rarity, c.Scryfallid, c.Scryfallillustrationid, c.Scryfalloracleid, c.Setcode, c.Side, c.Subtypes, c.Supertypes, c.Tcgplayerproductid, c.Text, c.Toughness, c.Type, c.Types, c.UUID, c.Variations, c.Watermark)
	_, err = db.Exec(sqlstr, c.ID, c.Artist, c.Asciiname, c.Availability, c.Bordercolor, c.Cardkingdomfoilid, c.Cardkingdomid, c.Coloridentity, c.Colorindicator, c.Colors, c.Convertedmanacost, c.Dueldeck, c.Edhrecrank, c.Faceconvertedmanacost, c.Facename, c.Flavorname, c.Flavortext, c.Frameeffects, c.Frameversion, c.Hand, c.Hasalternativedecklimit, c.Hascontentwarning, c.Hasfoil, c.Hasnonfoil, c.Isalternative, c.Isfullart, c.Isonlineonly, c.Isoversized, c.Ispromo, c.Isreprint, c.Isreserved, c.Isstarter, c.Isstoryspotlight, c.Istextless, c.Istimeshifted, c.Keywords, c.Layout, c.Leadershipskills, c.Life, c.Loyalty, c.Manacost, c.Mcmid, c.Mtgarenaid, c.Mtgjsonv4id, c.Mtgofoilid, c.Mtgoid, c.Multiverseid, c.Name, c.Number, c.Originalreleasedate, c.Originaltext, c.Originaltype, c.Otherfaceids, c.Power, c.Printings, c.Promotypes, c.Purchaseurls, c.Rarity, c.Scryfallid, c.Scryfallillustrationid, c.Scryfalloracleid, c.Setcode, c.Side, c.Subtypes, c.Supertypes, c.Tcgplayerproductid, c.Text, c.Toughness, c.Type, c.Types, c.UUID, c.Variations, c.Watermark)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Card from the database.
func (c *Card) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM cards WHERE id = $1`

	// run query
	XOLog(sqlstr, c.ID)
	_, err = db.Exec(sqlstr, c.ID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CardByID retrieves a row from 'cards' as a Card.
//
// Generated from index 'cards_id_pkey'.
func CardByID(db XODB, id sql.NullInt64) (*Card, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark ` +
		`FROM cards ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	c := Card{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&c.ID, &c.Artist, &c.Asciiname, &c.Availability, &c.Bordercolor, &c.Cardkingdomfoilid, &c.Cardkingdomid, &c.Coloridentity, &c.Colorindicator, &c.Colors, &c.Convertedmanacost, &c.Dueldeck, &c.Edhrecrank, &c.Faceconvertedmanacost, &c.Facename, &c.Flavorname, &c.Flavortext, &c.Frameeffects, &c.Frameversion, &c.Hand, &c.Hasalternativedecklimit, &c.Hascontentwarning, &c.Hasfoil, &c.Hasnonfoil, &c.Isalternative, &c.Isfullart, &c.Isonlineonly, &c.Isoversized, &c.Ispromo, &c.Isreprint, &c.Isreserved, &c.Isstarter, &c.Isstoryspotlight, &c.Istextless, &c.Istimeshifted, &c.Keywords, &c.Layout, &c.Leadershipskills, &c.Life, &c.Loyalty, &c.Manacost, &c.Mcmid, &c.Mtgarenaid, &c.Mtgjsonv4id, &c.Mtgofoilid, &c.Mtgoid, &c.Multiverseid, &c.Name, &c.Number, &c.Originalreleasedate, &c.Originaltext, &c.Originaltype, &c.Otherfaceids, &c.Power, &c.Printings, &c.Promotypes, &c.Purchaseurls, &c.Rarity, &c.Scryfallid, &c.Scryfallillustrationid, &c.Scryfalloracleid, &c.Setcode, &c.Side, &c.Subtypes, &c.Supertypes, &c.Tcgplayerproductid, &c.Text, &c.Toughness, &c.Type, &c.Types, &c.UUID, &c.Variations, &c.Watermark)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// CardByUUID retrieves a row from 'cards' as a Card.
//
// Generated from index 'sqlite_autoindex_cards_1'.
func CardByUUID(db XODB, uuid string) (*Card, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark ` +
		`FROM cards ` +
		`WHERE uuid = ?`

	// run query
	XOLog(sqlstr, uuid)
	c := Card{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, uuid).Scan(&c.ID, &c.Artist, &c.Asciiname, &c.Availability, &c.Bordercolor, &c.Cardkingdomfoilid, &c.Cardkingdomid, &c.Coloridentity, &c.Colorindicator, &c.Colors, &c.Convertedmanacost, &c.Dueldeck, &c.Edhrecrank, &c.Faceconvertedmanacost, &c.Facename, &c.Flavorname, &c.Flavortext, &c.Frameeffects, &c.Frameversion, &c.Hand, &c.Hasalternativedecklimit, &c.Hascontentwarning, &c.Hasfoil, &c.Hasnonfoil, &c.Isalternative, &c.Isfullart, &c.Isonlineonly, &c.Isoversized, &c.Ispromo, &c.Isreprint, &c.Isreserved, &c.Isstarter, &c.Isstoryspotlight, &c.Istextless, &c.Istimeshifted, &c.Keywords, &c.Layout, &c.Leadershipskills, &c.Life, &c.Loyalty, &c.Manacost, &c.Mcmid, &c.Mtgarenaid, &c.Mtgjsonv4id, &c.Mtgofoilid, &c.Mtgoid, &c.Multiverseid, &c.Name, &c.Number, &c.Originalreleasedate, &c.Originaltext, &c.Originaltype, &c.Otherfaceids, &c.Power, &c.Printings, &c.Promotypes, &c.Purchaseurls, &c.Rarity, &c.Scryfallid, &c.Scryfallillustrationid, &c.Scryfalloracleid, &c.Setcode, &c.Side, &c.Subtypes, &c.Supertypes, &c.Tcgplayerproductid, &c.Text, &c.Toughness, &c.Type, &c.Types, &c.UUID, &c.Variations, &c.Watermark)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
