// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Card represents a row from 'cards'.
type Card struct {
	ID                      NullInt64   `json:"id" db:"id"`                                           // id
	Artist                  NullString  `json:"artist" db:"artist"`                                   // artist
	Asciiname               NullString  `json:"asciiName" db:"asciiName"`                             // asciiName
	Availability            NullString  `json:"availability" db:"availability"`                       // availability
	Bordercolor             NullString  `json:"borderColor" db:"borderColor"`                         // borderColor
	Cardkingdomfoilid       NullString  `json:"cardKingdomFoilId" db:"cardKingdomFoilId"`             // cardKingdomFoilId
	Cardkingdomid           NullString  `json:"cardKingdomId" db:"cardKingdomId"`                     // cardKingdomId
	Coloridentity           NullString  `json:"colorIdentity" db:"colorIdentity"`                     // colorIdentity
	Colorindicator          NullString  `json:"colorIndicator" db:"colorIndicator"`                   // colorIndicator
	Colors                  NullString  `json:"colors" db:"colors"`                                   // colors
	Convertedmanacost       NullFloat64 `json:"convertedManaCost" db:"convertedManaCost"`             // convertedManaCost
	Dueldeck                NullString  `json:"duelDeck" db:"duelDeck"`                               // duelDeck
	Edhrecrank              NullInt64   `json:"edhrecRank" db:"edhrecRank"`                           // edhrecRank
	Faceconvertedmanacost   NullFloat64 `json:"faceConvertedManaCost" db:"faceConvertedManaCost"`     // faceConvertedManaCost
	Facename                NullString  `json:"faceName" db:"faceName"`                               // faceName
	Flavorname              NullString  `json:"flavorName" db:"flavorName"`                           // flavorName
	Flavortext              NullString  `json:"flavorText" db:"flavorText"`                           // flavorText
	Frameeffects            NullString  `json:"frameEffects" db:"frameEffects"`                       // frameEffects
	Frameversion            NullString  `json:"frameVersion" db:"frameVersion"`                       // frameVersion
	Hand                    NullString  `json:"hand" db:"hand"`                                       // hand
	Hasalternativedecklimit int         `json:"hasAlternativeDeckLimit" db:"hasAlternativeDeckLimit"` // hasAlternativeDeckLimit
	Hascontentwarning       int         `json:"hasContentWarning" db:"hasContentWarning"`             // hasContentWarning
	Hasfoil                 int         `json:"hasFoil" db:"hasFoil"`                                 // hasFoil
	Hasnonfoil              int         `json:"hasNonFoil" db:"hasNonFoil"`                           // hasNonFoil
	Isalternative           int         `json:"isAlternative" db:"isAlternative"`                     // isAlternative
	Isfullart               int         `json:"isFullArt" db:"isFullArt"`                             // isFullArt
	Isonlineonly            int         `json:"isOnlineOnly" db:"isOnlineOnly"`                       // isOnlineOnly
	Isoversized             int         `json:"isOversized" db:"isOversized"`                         // isOversized
	Ispromo                 int         `json:"isPromo" db:"isPromo"`                                 // isPromo
	Isreprint               int         `json:"isReprint" db:"isReprint"`                             // isReprint
	Isreserved              int         `json:"isReserved" db:"isReserved"`                           // isReserved
	Isstarter               int         `json:"isStarter" db:"isStarter"`                             // isStarter
	Isstoryspotlight        int         `json:"isStorySpotlight" db:"isStorySpotlight"`               // isStorySpotlight
	Istextless              int         `json:"isTextless" db:"isTextless"`                           // isTextless
	Istimeshifted           int         `json:"isTimeshifted" db:"isTimeshifted"`                     // isTimeshifted
	Keywords                NullString  `json:"keywords" db:"keywords"`                               // keywords
	Layout                  NullString  `json:"layout" db:"layout"`                                   // layout
	Leadershipskills        NullString  `json:"leadershipSkills" db:"leadershipSkills"`               // leadershipSkills
	Life                    NullString  `json:"life" db:"life"`                                       // life
	Loyalty                 NullString  `json:"loyalty" db:"loyalty"`                                 // loyalty
	Manacost                NullString  `json:"manaCost" db:"manaCost"`                               // manaCost
	Mcmid                   NullString  `json:"mcmId" db:"mcmId"`                                     // mcmId
	Mcmmetaid               NullString  `json:"mcmMetaId" db:"mcmMetaId"`                             // mcmMetaId
	Mtgarenaid              NullString  `json:"mtgArenaId" db:"mtgArenaId"`                           // mtgArenaId
	Mtgjsonv4id             NullString  `json:"mtgjsonV4Id" db:"mtgjsonV4Id"`                         // mtgjsonV4Id
	Mtgofoilid              NullString  `json:"mtgoFoilId" db:"mtgoFoilId"`                           // mtgoFoilId
	Mtgoid                  NullString  `json:"mtgoId" db:"mtgoId"`                                   // mtgoId
	Multiverseid            NullString  `json:"multiverseId" db:"multiverseId"`                       // multiverseId
	Name                    NullString  `json:"name" db:"name"`                                       // name
	Number                  NullString  `json:"number" db:"number"`                                   // number
	Originalreleasedate     NullString  `json:"originalReleaseDate" db:"originalReleaseDate"`         // originalReleaseDate
	Originaltext            NullString  `json:"originalText" db:"originalText"`                       // originalText
	Originaltype            NullString  `json:"originalType" db:"originalType"`                       // originalType
	Otherfaceids            NullString  `json:"otherFaceIds" db:"otherFaceIds"`                       // otherFaceIds
	Power                   NullString  `json:"power" db:"power"`                                     // power
	Printings               NullString  `json:"printings" db:"printings"`                             // printings
	Promotypes              NullString  `json:"promoTypes" db:"promoTypes"`                           // promoTypes
	Purchaseurls            NullString  `json:"purchaseUrls" db:"purchaseUrls"`                       // purchaseUrls
	Rarity                  NullString  `json:"rarity" db:"rarity"`                                   // rarity
	Scryfallid              NullString  `json:"scryfallId" db:"scryfallId"`                           // scryfallId
	Scryfallillustrationid  NullString  `json:"scryfallIllustrationId" db:"scryfallIllustrationId"`   // scryfallIllustrationId
	Scryfalloracleid        NullString  `json:"scryfallOracleId" db:"scryfallOracleId"`               // scryfallOracleId
	Setcode                 NullString  `json:"setCode" db:"setCode"`                                 // setCode
	Side                    NullString  `json:"side" db:"side"`                                       // side
	Subtypes                NullString  `json:"subtypes" db:"subtypes"`                               // subtypes
	Supertypes              NullString  `json:"supertypes" db:"supertypes"`                           // supertypes
	Tcgplayerproductid      NullString  `json:"tcgplayerProductId" db:"tcgplayerProductId"`           // tcgplayerProductId
	Text                    NullString  `json:"text" db:"text"`                                       // text
	Toughness               NullString  `json:"toughness" db:"toughness"`                             // toughness
	Type                    NullString  `json:"type" db:"type"`                                       // type
	Types                   NullString  `json:"types" db:"types"`                                     // types
	UUID                    string      `json:"uuid" db:"uuid"`                                       // uuid
	Variations              NullString  `json:"variations" db:"variations"`                           // variations
	Watermark               NullString  `json:"watermark" db:"watermark"`                             // watermark

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Card exists in the database.
func (c *Card) Exists() bool {
	return c._exists
}

// Deleted provides information if the Card has been deleted from the database.
func (c *Card) Deleted() bool {
	return c._deleted
}

// Insert inserts the Card to the database.
func (c *Card) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO cards (` +
		`artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, c.Artist, c.Asciiname, c.Availability, c.Bordercolor, c.Cardkingdomfoilid, c.Cardkingdomid, c.Coloridentity, c.Colorindicator, c.Colors, c.Convertedmanacost, c.Dueldeck, c.Edhrecrank, c.Faceconvertedmanacost, c.Facename, c.Flavorname, c.Flavortext, c.Frameeffects, c.Frameversion, c.Hand, c.Hasalternativedecklimit, c.Hascontentwarning, c.Hasfoil, c.Hasnonfoil, c.Isalternative, c.Isfullart, c.Isonlineonly, c.Isoversized, c.Ispromo, c.Isreprint, c.Isreserved, c.Isstarter, c.Isstoryspotlight, c.Istextless, c.Istimeshifted, c.Keywords, c.Layout, c.Leadershipskills, c.Life, c.Loyalty, c.Manacost, c.Mcmid, c.Mcmmetaid, c.Mtgarenaid, c.Mtgjsonv4id, c.Mtgofoilid, c.Mtgoid, c.Multiverseid, c.Name, c.Number, c.Originalreleasedate, c.Originaltext, c.Originaltype, c.Otherfaceids, c.Power, c.Printings, c.Promotypes, c.Purchaseurls, c.Rarity, c.Scryfallid, c.Scryfallillustrationid, c.Scryfalloracleid, c.Setcode, c.Side, c.Subtypes, c.Supertypes, c.Tcgplayerproductid, c.Text, c.Toughness, c.Type, c.Types, c.UUID, c.Variations, c.Watermark)
	err = db.QueryRow(sqlstr, c.Artist, c.Asciiname, c.Availability, c.Bordercolor, c.Cardkingdomfoilid, c.Cardkingdomid, c.Coloridentity, c.Colorindicator, c.Colors, c.Convertedmanacost, c.Dueldeck, c.Edhrecrank, c.Faceconvertedmanacost, c.Facename, c.Flavorname, c.Flavortext, c.Frameeffects, c.Frameversion, c.Hand, c.Hasalternativedecklimit, c.Hascontentwarning, c.Hasfoil, c.Hasnonfoil, c.Isalternative, c.Isfullart, c.Isonlineonly, c.Isoversized, c.Ispromo, c.Isreprint, c.Isreserved, c.Isstarter, c.Isstoryspotlight, c.Istextless, c.Istimeshifted, c.Keywords, c.Layout, c.Leadershipskills, c.Life, c.Loyalty, c.Manacost, c.Mcmid, c.Mcmmetaid, c.Mtgarenaid, c.Mtgjsonv4id, c.Mtgofoilid, c.Mtgoid, c.Multiverseid, c.Name, c.Number, c.Originalreleasedate, c.Originaltext, c.Originaltype, c.Otherfaceids, c.Power, c.Printings, c.Promotypes, c.Purchaseurls, c.Rarity, c.Scryfallid, c.Scryfallillustrationid, c.Scryfalloracleid, c.Setcode, c.Side, c.Subtypes, c.Supertypes, c.Tcgplayerproductid, c.Text, c.Toughness, c.Type, c.Types, c.UUID, c.Variations, c.Watermark).Scan(&c.ID)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Card in the database.
func (c *Card) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE cards SET (` +
		`artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark` +
		`) = ( ` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`) WHERE id = $74`

	// run query
	XOLog(sqlstr, c.Artist, c.Asciiname, c.Availability, c.Bordercolor, c.Cardkingdomfoilid, c.Cardkingdomid, c.Coloridentity, c.Colorindicator, c.Colors, c.Convertedmanacost, c.Dueldeck, c.Edhrecrank, c.Faceconvertedmanacost, c.Facename, c.Flavorname, c.Flavortext, c.Frameeffects, c.Frameversion, c.Hand, c.Hasalternativedecklimit, c.Hascontentwarning, c.Hasfoil, c.Hasnonfoil, c.Isalternative, c.Isfullart, c.Isonlineonly, c.Isoversized, c.Ispromo, c.Isreprint, c.Isreserved, c.Isstarter, c.Isstoryspotlight, c.Istextless, c.Istimeshifted, c.Keywords, c.Layout, c.Leadershipskills, c.Life, c.Loyalty, c.Manacost, c.Mcmid, c.Mcmmetaid, c.Mtgarenaid, c.Mtgjsonv4id, c.Mtgofoilid, c.Mtgoid, c.Multiverseid, c.Name, c.Number, c.Originalreleasedate, c.Originaltext, c.Originaltype, c.Otherfaceids, c.Power, c.Printings, c.Promotypes, c.Purchaseurls, c.Rarity, c.Scryfallid, c.Scryfallillustrationid, c.Scryfalloracleid, c.Setcode, c.Side, c.Subtypes, c.Supertypes, c.Tcgplayerproductid, c.Text, c.Toughness, c.Type, c.Types, c.UUID, c.Variations, c.Watermark, c.ID)
	_, err = db.Exec(sqlstr, c.Artist, c.Asciiname, c.Availability, c.Bordercolor, c.Cardkingdomfoilid, c.Cardkingdomid, c.Coloridentity, c.Colorindicator, c.Colors, c.Convertedmanacost, c.Dueldeck, c.Edhrecrank, c.Faceconvertedmanacost, c.Facename, c.Flavorname, c.Flavortext, c.Frameeffects, c.Frameversion, c.Hand, c.Hasalternativedecklimit, c.Hascontentwarning, c.Hasfoil, c.Hasnonfoil, c.Isalternative, c.Isfullart, c.Isonlineonly, c.Isoversized, c.Ispromo, c.Isreprint, c.Isreserved, c.Isstarter, c.Isstoryspotlight, c.Istextless, c.Istimeshifted, c.Keywords, c.Layout, c.Leadershipskills, c.Life, c.Loyalty, c.Manacost, c.Mcmid, c.Mcmmetaid, c.Mtgarenaid, c.Mtgjsonv4id, c.Mtgofoilid, c.Mtgoid, c.Multiverseid, c.Name, c.Number, c.Originalreleasedate, c.Originaltext, c.Originaltype, c.Otherfaceids, c.Power, c.Printings, c.Promotypes, c.Purchaseurls, c.Rarity, c.Scryfallid, c.Scryfallillustrationid, c.Scryfalloracleid, c.Setcode, c.Side, c.Subtypes, c.Supertypes, c.Tcgplayerproductid, c.Text, c.Toughness, c.Type, c.Types, c.UUID, c.Variations, c.Watermark, c.ID)
	return err
}

// Save saves the Card to the database.
func (c *Card) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Card.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Card) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO cards (` +
		`id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.artist, EXCLUDED.asciiName, EXCLUDED.availability, EXCLUDED.borderColor, EXCLUDED.cardKingdomFoilId, EXCLUDED.cardKingdomId, EXCLUDED.colorIdentity, EXCLUDED.colorIndicator, EXCLUDED.colors, EXCLUDED.convertedManaCost, EXCLUDED.duelDeck, EXCLUDED.edhrecRank, EXCLUDED.faceConvertedManaCost, EXCLUDED.faceName, EXCLUDED.flavorName, EXCLUDED.flavorText, EXCLUDED.frameEffects, EXCLUDED.frameVersion, EXCLUDED.hand, EXCLUDED.hasAlternativeDeckLimit, EXCLUDED.hasContentWarning, EXCLUDED.hasFoil, EXCLUDED.hasNonFoil, EXCLUDED.isAlternative, EXCLUDED.isFullArt, EXCLUDED.isOnlineOnly, EXCLUDED.isOversized, EXCLUDED.isPromo, EXCLUDED.isReprint, EXCLUDED.isReserved, EXCLUDED.isStarter, EXCLUDED.isStorySpotlight, EXCLUDED.isTextless, EXCLUDED.isTimeshifted, EXCLUDED.keywords, EXCLUDED.layout, EXCLUDED.leadershipSkills, EXCLUDED.life, EXCLUDED.loyalty, EXCLUDED.manaCost, EXCLUDED.mcmId, EXCLUDED.mcmMetaId, EXCLUDED.mtgArenaId, EXCLUDED.mtgjsonV4Id, EXCLUDED.mtgoFoilId, EXCLUDED.mtgoId, EXCLUDED.multiverseId, EXCLUDED.name, EXCLUDED.number, EXCLUDED.originalReleaseDate, EXCLUDED.originalText, EXCLUDED.originalType, EXCLUDED.otherFaceIds, EXCLUDED.power, EXCLUDED.printings, EXCLUDED.promoTypes, EXCLUDED.purchaseUrls, EXCLUDED.rarity, EXCLUDED.scryfallId, EXCLUDED.scryfallIllustrationId, EXCLUDED.scryfallOracleId, EXCLUDED.setCode, EXCLUDED.side, EXCLUDED.subtypes, EXCLUDED.supertypes, EXCLUDED.tcgplayerProductId, EXCLUDED.text, EXCLUDED.toughness, EXCLUDED.type, EXCLUDED.types, EXCLUDED.uuid, EXCLUDED.variations, EXCLUDED.watermark` +
		`)`

	// run query
	XOLog(sqlstr, c.ID, c.Artist, c.Asciiname, c.Availability, c.Bordercolor, c.Cardkingdomfoilid, c.Cardkingdomid, c.Coloridentity, c.Colorindicator, c.Colors, c.Convertedmanacost, c.Dueldeck, c.Edhrecrank, c.Faceconvertedmanacost, c.Facename, c.Flavorname, c.Flavortext, c.Frameeffects, c.Frameversion, c.Hand, c.Hasalternativedecklimit, c.Hascontentwarning, c.Hasfoil, c.Hasnonfoil, c.Isalternative, c.Isfullart, c.Isonlineonly, c.Isoversized, c.Ispromo, c.Isreprint, c.Isreserved, c.Isstarter, c.Isstoryspotlight, c.Istextless, c.Istimeshifted, c.Keywords, c.Layout, c.Leadershipskills, c.Life, c.Loyalty, c.Manacost, c.Mcmid, c.Mcmmetaid, c.Mtgarenaid, c.Mtgjsonv4id, c.Mtgofoilid, c.Mtgoid, c.Multiverseid, c.Name, c.Number, c.Originalreleasedate, c.Originaltext, c.Originaltype, c.Otherfaceids, c.Power, c.Printings, c.Promotypes, c.Purchaseurls, c.Rarity, c.Scryfallid, c.Scryfallillustrationid, c.Scryfalloracleid, c.Setcode, c.Side, c.Subtypes, c.Supertypes, c.Tcgplayerproductid, c.Text, c.Toughness, c.Type, c.Types, c.UUID, c.Variations, c.Watermark)
	_, err = db.Exec(sqlstr, c.ID, c.Artist, c.Asciiname, c.Availability, c.Bordercolor, c.Cardkingdomfoilid, c.Cardkingdomid, c.Coloridentity, c.Colorindicator, c.Colors, c.Convertedmanacost, c.Dueldeck, c.Edhrecrank, c.Faceconvertedmanacost, c.Facename, c.Flavorname, c.Flavortext, c.Frameeffects, c.Frameversion, c.Hand, c.Hasalternativedecklimit, c.Hascontentwarning, c.Hasfoil, c.Hasnonfoil, c.Isalternative, c.Isfullart, c.Isonlineonly, c.Isoversized, c.Ispromo, c.Isreprint, c.Isreserved, c.Isstarter, c.Isstoryspotlight, c.Istextless, c.Istimeshifted, c.Keywords, c.Layout, c.Leadershipskills, c.Life, c.Loyalty, c.Manacost, c.Mcmid, c.Mcmmetaid, c.Mtgarenaid, c.Mtgjsonv4id, c.Mtgofoilid, c.Mtgoid, c.Multiverseid, c.Name, c.Number, c.Originalreleasedate, c.Originaltext, c.Originaltype, c.Otherfaceids, c.Power, c.Printings, c.Promotypes, c.Purchaseurls, c.Rarity, c.Scryfallid, c.Scryfallillustrationid, c.Scryfalloracleid, c.Setcode, c.Side, c.Subtypes, c.Supertypes, c.Tcgplayerproductid, c.Text, c.Toughness, c.Type, c.Types, c.UUID, c.Variations, c.Watermark)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Card from the database.
func (c *Card) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM cards WHERE id = $1`

	// run query
	XOLog(sqlstr, c.ID)
	_, err = db.Exec(sqlstr, c.ID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CardByID retrieves a row from 'cards' as a Card.
//
// Generated from index 'cards_id_pkey'.
func CardByID(db XODB, id NullInt64) (*Card, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark ` +
		`FROM cards ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	c := Card{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&c.ID, &c.Artist, &c.Asciiname, &c.Availability, &c.Bordercolor, &c.Cardkingdomfoilid, &c.Cardkingdomid, &c.Coloridentity, &c.Colorindicator, &c.Colors, &c.Convertedmanacost, &c.Dueldeck, &c.Edhrecrank, &c.Faceconvertedmanacost, &c.Facename, &c.Flavorname, &c.Flavortext, &c.Frameeffects, &c.Frameversion, &c.Hand, &c.Hasalternativedecklimit, &c.Hascontentwarning, &c.Hasfoil, &c.Hasnonfoil, &c.Isalternative, &c.Isfullart, &c.Isonlineonly, &c.Isoversized, &c.Ispromo, &c.Isreprint, &c.Isreserved, &c.Isstarter, &c.Isstoryspotlight, &c.Istextless, &c.Istimeshifted, &c.Keywords, &c.Layout, &c.Leadershipskills, &c.Life, &c.Loyalty, &c.Manacost, &c.Mcmid, &c.Mcmmetaid, &c.Mtgarenaid, &c.Mtgjsonv4id, &c.Mtgofoilid, &c.Mtgoid, &c.Multiverseid, &c.Name, &c.Number, &c.Originalreleasedate, &c.Originaltext, &c.Originaltype, &c.Otherfaceids, &c.Power, &c.Printings, &c.Promotypes, &c.Purchaseurls, &c.Rarity, &c.Scryfallid, &c.Scryfallillustrationid, &c.Scryfalloracleid, &c.Setcode, &c.Side, &c.Subtypes, &c.Supertypes, &c.Tcgplayerproductid, &c.Text, &c.Toughness, &c.Type, &c.Types, &c.UUID, &c.Variations, &c.Watermark)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// CardByUUID retrieves a row from 'cards' as a Card.
//
// Generated from index 'sqlite_autoindex_cards_1'.
func CardByUUID(db XODB, uuid string) (*Card, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark ` +
		`FROM cards ` +
		`WHERE uuid = ?`

	// run query
	XOLog(sqlstr, uuid)
	c := Card{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, uuid).Scan(&c.ID, &c.Artist, &c.Asciiname, &c.Availability, &c.Bordercolor, &c.Cardkingdomfoilid, &c.Cardkingdomid, &c.Coloridentity, &c.Colorindicator, &c.Colors, &c.Convertedmanacost, &c.Dueldeck, &c.Edhrecrank, &c.Faceconvertedmanacost, &c.Facename, &c.Flavorname, &c.Flavortext, &c.Frameeffects, &c.Frameversion, &c.Hand, &c.Hasalternativedecklimit, &c.Hascontentwarning, &c.Hasfoil, &c.Hasnonfoil, &c.Isalternative, &c.Isfullart, &c.Isonlineonly, &c.Isoversized, &c.Ispromo, &c.Isreprint, &c.Isreserved, &c.Isstarter, &c.Isstoryspotlight, &c.Istextless, &c.Istimeshifted, &c.Keywords, &c.Layout, &c.Leadershipskills, &c.Life, &c.Loyalty, &c.Manacost, &c.Mcmid, &c.Mcmmetaid, &c.Mtgarenaid, &c.Mtgjsonv4id, &c.Mtgofoilid, &c.Mtgoid, &c.Multiverseid, &c.Name, &c.Number, &c.Originalreleasedate, &c.Originaltext, &c.Originaltype, &c.Otherfaceids, &c.Power, &c.Printings, &c.Promotypes, &c.Purchaseurls, &c.Rarity, &c.Scryfallid, &c.Scryfallillustrationid, &c.Scryfalloracleid, &c.Setcode, &c.Side, &c.Subtypes, &c.Supertypes, &c.Tcgplayerproductid, &c.Text, &c.Toughness, &c.Type, &c.Types, &c.UUID, &c.Variations, &c.Watermark)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
