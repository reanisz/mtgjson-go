// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"

	"github.com/xo/xoutil"
)

// Metum represents a row from 'meta'.
type Metum struct {
	ID      sql.NullInt64  `json:"id" db:"id"`           // id
	Date    xoutil.SqTime  `json:"date" db:"date"`       // date
	Version sql.NullString `json:"version" db:"version"` // version

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Metum exists in the database.
func (m *Metum) Exists() bool {
	return m._exists
}

// Deleted provides information if the Metum has been deleted from the database.
func (m *Metum) Deleted() bool {
	return m._deleted
}

// Insert inserts the Metum to the database.
func (m *Metum) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO meta (` +
		`date, version` +
		`) VALUES (` +
		`?, ?` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, m.Date, m.Version)
	err = db.QueryRow(sqlstr, m.Date, m.Version).Scan(&m.ID)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Update updates the Metum in the database.
func (m *Metum) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if m._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE meta SET (` +
		`date, version` +
		`) = ( ` +
		`?, ?` +
		`) WHERE id = $3`

	// run query
	XOLog(sqlstr, m.Date, m.Version, m.ID)
	_, err = db.Exec(sqlstr, m.Date, m.Version, m.ID)
	return err
}

// Save saves the Metum to the database.
func (m *Metum) Save(db XODB) error {
	if m.Exists() {
		return m.Update(db)
	}

	return m.Insert(db)
}

// Upsert performs an upsert for Metum.
//
// NOTE: PostgreSQL 9.5+ only
func (m *Metum) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if m._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO meta (` +
		`id, date, version` +
		`) VALUES (` +
		`?, ?, ?` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, date, version` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.date, EXCLUDED.version` +
		`)`

	// run query
	XOLog(sqlstr, m.ID, m.Date, m.Version)
	_, err = db.Exec(sqlstr, m.ID, m.Date, m.Version)
	if err != nil {
		return err
	}

	// set existence
	m._exists = true

	return nil
}

// Delete deletes the Metum from the database.
func (m *Metum) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !m._exists {
		return nil
	}

	// if deleted, bail
	if m._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM meta WHERE id = $1`

	// run query
	XOLog(sqlstr, m.ID)
	_, err = db.Exec(sqlstr, m.ID)
	if err != nil {
		return err
	}

	// set deleted
	m._deleted = true

	return nil
}

// MetumByID retrieves a row from 'meta' as a Metum.
//
// Generated from index 'meta_id_pkey'.
func MetumByID(db XODB, id sql.NullInt64) (*Metum, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, date, version ` +
		`FROM meta ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	m := Metum{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&m.ID, &m.Date, &m.Version)
	if err != nil {
		return nil, err
	}

	return &m, nil
}
