// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Legality represents a row from 'legalities'.
type Legality struct {
	ID     NullInt64  `json:"id" db:"id"`         // id
	Format NullString `json:"format" db:"format"` // format
	Status NullString `json:"status" db:"status"` // status
	UUID   NullString `json:"uuid" db:"uuid"`     // uuid

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Legality exists in the database.
func (l *Legality) Exists() bool {
	return l._exists
}

// Deleted provides information if the Legality has been deleted from the database.
func (l *Legality) Deleted() bool {
	return l._deleted
}

// Insert inserts the Legality to the database.
func (l *Legality) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if l._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO legalities (` +
		`format, status, uuid` +
		`) VALUES (` +
		`?, ?, ?` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, l.Format, l.Status, l.UUID)
	err = db.QueryRow(sqlstr, l.Format, l.Status, l.UUID).Scan(&l.ID)
	if err != nil {
		return err
	}

	// set existence
	l._exists = true

	return nil
}

// Update updates the Legality in the database.
func (l *Legality) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if l._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE legalities SET (` +
		`format, status, uuid` +
		`) = ( ` +
		`?, ?, ?` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, l.Format, l.Status, l.UUID, l.ID)
	_, err = db.Exec(sqlstr, l.Format, l.Status, l.UUID, l.ID)
	return err
}

// Save saves the Legality to the database.
func (l *Legality) Save(db XODB) error {
	if l.Exists() {
		return l.Update(db)
	}

	return l.Insert(db)
}

// Upsert performs an upsert for Legality.
//
// NOTE: PostgreSQL 9.5+ only
func (l *Legality) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if l._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO legalities (` +
		`id, format, status, uuid` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, format, status, uuid` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.format, EXCLUDED.status, EXCLUDED.uuid` +
		`)`

	// run query
	XOLog(sqlstr, l.ID, l.Format, l.Status, l.UUID)
	_, err = db.Exec(sqlstr, l.ID, l.Format, l.Status, l.UUID)
	if err != nil {
		return err
	}

	// set existence
	l._exists = true

	return nil
}

// Delete deletes the Legality from the database.
func (l *Legality) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return nil
	}

	// if deleted, bail
	if l._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM legalities WHERE id = $1`

	// run query
	XOLog(sqlstr, l.ID)
	_, err = db.Exec(sqlstr, l.ID)
	if err != nil {
		return err
	}

	// set deleted
	l._deleted = true

	return nil
}

// Card returns the Card associated with the Legality's UUID (uuid).
//
// Generated from foreign key 'legalities_uuid_fkey'.
func (l *Legality) Card(db XODB) (*Card, error) {
	return CardByUUID(db, l.UUID.String)
}

// LegalityByID retrieves a row from 'legalities' as a Legality.
//
// Generated from index 'legalities_id_pkey'.
func LegalityByID(db XODB, id NullInt64) (*Legality, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, format, status, uuid ` +
		`FROM legalities ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	l := Legality{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&l.ID, &l.Format, &l.Status, &l.UUID)
	if err != nil {
		return nil, err
	}

	return &l, nil
}
