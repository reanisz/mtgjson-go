// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// SetTranslation represents a row from 'set_translations'.
type SetTranslation struct {
	ID          sql.NullInt64  `json:"id" db:"id"`                   // id
	Language    sql.NullString `json:"language" db:"language"`       // language
	Setcode     sql.NullString `json:"setCode" db:"setCode"`         // setCode
	Translation sql.NullString `json:"translation" db:"translation"` // translation

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the SetTranslation exists in the database.
func (st *SetTranslation) Exists() bool {
	return st._exists
}

// Deleted provides information if the SetTranslation has been deleted from the database.
func (st *SetTranslation) Deleted() bool {
	return st._deleted
}

// Insert inserts the SetTranslation to the database.
func (st *SetTranslation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if st._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO set_translations (` +
		`language, setCode, translation` +
		`) VALUES (` +
		`?, ?, ?` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, st.Language, st.Setcode, st.Translation)
	err = db.QueryRow(sqlstr, st.Language, st.Setcode, st.Translation).Scan(&st.ID)
	if err != nil {
		return err
	}

	// set existence
	st._exists = true

	return nil
}

// Update updates the SetTranslation in the database.
func (st *SetTranslation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !st._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if st._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE set_translations SET (` +
		`language, setCode, translation` +
		`) = ( ` +
		`?, ?, ?` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, st.Language, st.Setcode, st.Translation, st.ID)
	_, err = db.Exec(sqlstr, st.Language, st.Setcode, st.Translation, st.ID)
	return err
}

// Save saves the SetTranslation to the database.
func (st *SetTranslation) Save(db XODB) error {
	if st.Exists() {
		return st.Update(db)
	}

	return st.Insert(db)
}

// Upsert performs an upsert for SetTranslation.
//
// NOTE: PostgreSQL 9.5+ only
func (st *SetTranslation) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if st._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO set_translations (` +
		`id, language, setCode, translation` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, language, setCode, translation` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.language, EXCLUDED.setCode, EXCLUDED.translation` +
		`)`

	// run query
	XOLog(sqlstr, st.ID, st.Language, st.Setcode, st.Translation)
	_, err = db.Exec(sqlstr, st.ID, st.Language, st.Setcode, st.Translation)
	if err != nil {
		return err
	}

	// set existence
	st._exists = true

	return nil
}

// Delete deletes the SetTranslation from the database.
func (st *SetTranslation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !st._exists {
		return nil
	}

	// if deleted, bail
	if st._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM set_translations WHERE id = $1`

	// run query
	XOLog(sqlstr, st.ID)
	_, err = db.Exec(sqlstr, st.ID)
	if err != nil {
		return err
	}

	// set deleted
	st._deleted = true

	return nil
}

// Set returns the Set associated with the SetTranslation's Setcode (setCode).
//
// Generated from foreign key 'set_translations_setCode_fkey'.
func (st *SetTranslation) Set(db XODB) (*Set, error) {
	return SetByCode(db, st.Setcode.String)
}

// SetTranslationByID retrieves a row from 'set_translations' as a SetTranslation.
//
// Generated from index 'set_translations_id_pkey'.
func SetTranslationByID(db XODB, id sql.NullInt64) (*SetTranslation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, language, setCode, translation ` +
		`FROM set_translations ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	st := SetTranslation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&st.ID, &st.Language, &st.Setcode, &st.Translation)
	if err != nil {
		return nil, err
	}

	return &st, nil
}
