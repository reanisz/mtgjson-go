// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	"github.com/xo/xoutil"
)

// Set represents a row from 'sets'.
type Set struct {
	ID               NullInt64     `json:"id" db:"id"`                             // id
	Basesetsize      NullInt64     `json:"baseSetSize" db:"baseSetSize"`           // baseSetSize
	Block            NullString    `json:"block" db:"block"`                       // block
	Booster          NullString    `json:"booster" db:"booster"`                   // booster
	Code             string        `json:"code" db:"code"`                         // code
	Isfoilonly       int           `json:"isFoilOnly" db:"isFoilOnly"`             // isFoilOnly
	Isforeignonly    int           `json:"isForeignOnly" db:"isForeignOnly"`       // isForeignOnly
	Isnonfoilonly    int           `json:"isNonFoilOnly" db:"isNonFoilOnly"`       // isNonFoilOnly
	Isonlineonly     int           `json:"isOnlineOnly" db:"isOnlineOnly"`         // isOnlineOnly
	Ispartialpreview int           `json:"isPartialPreview" db:"isPartialPreview"` // isPartialPreview
	Keyrunecode      NullString    `json:"keyruneCode" db:"keyruneCode"`           // keyruneCode
	Mcmid            NullInt64     `json:"mcmId" db:"mcmId"`                       // mcmId
	Mcmidextras      NullInt64     `json:"mcmIdExtras" db:"mcmIdExtras"`           // mcmIdExtras
	Mcmname          NullString    `json:"mcmName" db:"mcmName"`                   // mcmName
	Mtgocode         NullString    `json:"mtgoCode" db:"mtgoCode"`                 // mtgoCode
	Name             NullString    `json:"name" db:"name"`                         // name
	Parentcode       NullString    `json:"parentCode" db:"parentCode"`             // parentCode
	Releasedate      xoutil.SqTime `json:"releaseDate" db:"releaseDate"`           // releaseDate
	Sealedproduct    NullString    `json:"sealedProduct" db:"sealedProduct"`       // sealedProduct
	Tcgplayergroupid NullInt64     `json:"tcgplayerGroupId" db:"tcgplayerGroupId"` // tcgplayerGroupId
	Totalsetsize     NullInt64     `json:"totalSetSize" db:"totalSetSize"`         // totalSetSize
	Type             NullString    `json:"type" db:"type"`                         // type

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Set exists in the database.
func (s *Set) Exists() bool {
	return s._exists
}

// Deleted provides information if the Set has been deleted from the database.
func (s *Set) Deleted() bool {
	return s._deleted
}

// Insert inserts the Set to the database.
func (s *Set) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO sets (` +
		`baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, sealedProduct, tcgplayerGroupId, totalSetSize, type` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, s.Basesetsize, s.Block, s.Booster, s.Code, s.Isfoilonly, s.Isforeignonly, s.Isnonfoilonly, s.Isonlineonly, s.Ispartialpreview, s.Keyrunecode, s.Mcmid, s.Mcmidextras, s.Mcmname, s.Mtgocode, s.Name, s.Parentcode, s.Releasedate, s.Sealedproduct, s.Tcgplayergroupid, s.Totalsetsize, s.Type)
	err = db.QueryRow(sqlstr, s.Basesetsize, s.Block, s.Booster, s.Code, s.Isfoilonly, s.Isforeignonly, s.Isnonfoilonly, s.Isonlineonly, s.Ispartialpreview, s.Keyrunecode, s.Mcmid, s.Mcmidextras, s.Mcmname, s.Mtgocode, s.Name, s.Parentcode, s.Releasedate, s.Sealedproduct, s.Tcgplayergroupid, s.Totalsetsize, s.Type).Scan(&s.ID)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Update updates the Set in the database.
func (s *Set) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sets SET (` +
		`baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, sealedProduct, tcgplayerGroupId, totalSetSize, type` +
		`) = ( ` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`) WHERE id = $22`

	// run query
	XOLog(sqlstr, s.Basesetsize, s.Block, s.Booster, s.Code, s.Isfoilonly, s.Isforeignonly, s.Isnonfoilonly, s.Isonlineonly, s.Ispartialpreview, s.Keyrunecode, s.Mcmid, s.Mcmidextras, s.Mcmname, s.Mtgocode, s.Name, s.Parentcode, s.Releasedate, s.Sealedproduct, s.Tcgplayergroupid, s.Totalsetsize, s.Type, s.ID)
	_, err = db.Exec(sqlstr, s.Basesetsize, s.Block, s.Booster, s.Code, s.Isfoilonly, s.Isforeignonly, s.Isnonfoilonly, s.Isonlineonly, s.Ispartialpreview, s.Keyrunecode, s.Mcmid, s.Mcmidextras, s.Mcmname, s.Mtgocode, s.Name, s.Parentcode, s.Releasedate, s.Sealedproduct, s.Tcgplayergroupid, s.Totalsetsize, s.Type, s.ID)
	return err
}

// Save saves the Set to the database.
func (s *Set) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Upsert performs an upsert for Set.
//
// NOTE: PostgreSQL 9.5+ only
func (s *Set) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO sets (` +
		`id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, sealedProduct, tcgplayerGroupId, totalSetSize, type` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, sealedProduct, tcgplayerGroupId, totalSetSize, type` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.baseSetSize, EXCLUDED.block, EXCLUDED.booster, EXCLUDED.code, EXCLUDED.isFoilOnly, EXCLUDED.isForeignOnly, EXCLUDED.isNonFoilOnly, EXCLUDED.isOnlineOnly, EXCLUDED.isPartialPreview, EXCLUDED.keyruneCode, EXCLUDED.mcmId, EXCLUDED.mcmIdExtras, EXCLUDED.mcmName, EXCLUDED.mtgoCode, EXCLUDED.name, EXCLUDED.parentCode, EXCLUDED.releaseDate, EXCLUDED.sealedProduct, EXCLUDED.tcgplayerGroupId, EXCLUDED.totalSetSize, EXCLUDED.type` +
		`)`

	// run query
	XOLog(sqlstr, s.ID, s.Basesetsize, s.Block, s.Booster, s.Code, s.Isfoilonly, s.Isforeignonly, s.Isnonfoilonly, s.Isonlineonly, s.Ispartialpreview, s.Keyrunecode, s.Mcmid, s.Mcmidextras, s.Mcmname, s.Mtgocode, s.Name, s.Parentcode, s.Releasedate, s.Sealedproduct, s.Tcgplayergroupid, s.Totalsetsize, s.Type)
	_, err = db.Exec(sqlstr, s.ID, s.Basesetsize, s.Block, s.Booster, s.Code, s.Isfoilonly, s.Isforeignonly, s.Isnonfoilonly, s.Isonlineonly, s.Ispartialpreview, s.Keyrunecode, s.Mcmid, s.Mcmidextras, s.Mcmname, s.Mtgocode, s.Name, s.Parentcode, s.Releasedate, s.Sealedproduct, s.Tcgplayergroupid, s.Totalsetsize, s.Type)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Delete deletes the Set from the database.
func (s *Set) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sets WHERE id = $1`

	// run query
	XOLog(sqlstr, s.ID)
	_, err = db.Exec(sqlstr, s.ID)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// SetByID retrieves a row from 'sets' as a Set.
//
// Generated from index 'sets_id_pkey'.
func SetByID(db XODB, id NullInt64) (*Set, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, sealedProduct, tcgplayerGroupId, totalSetSize, type ` +
		`FROM sets ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	s := Set{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&s.ID, &s.Basesetsize, &s.Block, &s.Booster, &s.Code, &s.Isfoilonly, &s.Isforeignonly, &s.Isnonfoilonly, &s.Isonlineonly, &s.Ispartialpreview, &s.Keyrunecode, &s.Mcmid, &s.Mcmidextras, &s.Mcmname, &s.Mtgocode, &s.Name, &s.Parentcode, &s.Releasedate, &s.Sealedproduct, &s.Tcgplayergroupid, &s.Totalsetsize, &s.Type)
	if err != nil {
		return nil, err
	}

	return &s, nil
}

// SetByCode retrieves a row from 'sets' as a Set.
//
// Generated from index 'sqlite_autoindex_sets_1'.
func SetByCode(db XODB, code string) (*Set, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, sealedProduct, tcgplayerGroupId, totalSetSize, type ` +
		`FROM sets ` +
		`WHERE code = ?`

	// run query
	XOLog(sqlstr, code)
	s := Set{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, code).Scan(&s.ID, &s.Basesetsize, &s.Block, &s.Booster, &s.Code, &s.Isfoilonly, &s.Isforeignonly, &s.Isnonfoilonly, &s.Isonlineonly, &s.Ispartialpreview, &s.Keyrunecode, &s.Mcmid, &s.Mcmidextras, &s.Mcmname, &s.Mtgocode, &s.Name, &s.Parentcode, &s.Releasedate, &s.Sealedproduct, &s.Tcgplayergroupid, &s.Totalsetsize, &s.Type)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
